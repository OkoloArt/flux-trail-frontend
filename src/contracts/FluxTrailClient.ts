/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app';
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client';
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec';
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from '@algorandfoundation/algokit-utils/types/transaction';
import type { ABIResult, TransactionWithSigner } from 'algosdk';
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
  modelsv2,
} from 'algosdk';
export const APP_SPEC: AppSpec = {
  hints: {
    'createApplication(string,string,string,string,string,string,string,uint64,address)void': {
      call_config: {
        no_op: 'CREATE',
      },
    },
    'updateReceiverAddress(address)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'updatePrice(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'mintTicket(pay,string,uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'claimTicket()void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'useTicket(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'burnTicket(axfer)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'optInToApplication()void': {
      call_config: {
        opt_in: 'CALL',
      },
    },
    'deleteApplication()void': {
      call_config: {
        delete_application: 'CALL',
      },
    },
  },
  bare_call_config: {
    no_op: 'NEVER',
    opt_in: 'NEVER',
    close_out: 'NEVER',
    update_application: 'NEVER',
    delete_application: 'NEVER',
  },
  schema: {
    local: {
      declared: {
        ticket: {
          type: 'uint64',
          key: 'ticket',
        },
      },
      reserved: {},
    },
    global: {
      declared: {
        transportMedium: {
          type: 'bytes',
          key: 'transportMedium',
        },
        from: {
          type: 'bytes',
          key: 'from',
        },
        fromStateCode: {
          type: 'bytes',
          key: 'fromStateCode',
        },
        fromTerminal: {
          type: 'bytes',
          key: 'fromTerminal',
        },
        to: {
          type: 'bytes',
          key: 'to',
        },
        toStateCode: {
          type: 'bytes',
          key: 'toStateCode',
        },
        toTerminal: {
          type: 'bytes',
          key: 'toTerminal',
        },
        price: {
          type: 'uint64',
          key: 'price',
        },
        numberOfTicketsSold: {
          type: 'uint64',
          key: 'numberOfTicketsSold',
        },
        receiverAddress: {
          type: 'bytes',
          key: 'receiverAddress',
        },
      },
      reserved: {},
    },
  },
  state: {
    global: {
      num_byte_slices: 8,
      num_uints: 2,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 1,
    },
  },
  source: {
    approval:
      '',
    clear: 'I3ByYWdtYSB2ZXJzaW9uIDEw',
  },
  contract: {
    name: 'FluxTrail',
    desc: '',
    methods: [
      {
        name: 'createApplication',
        desc: 'This instantiates the application with provided\ninitial values',
        args: [
          {
            name: 'transportMedium',
            type: 'string',
            desc: "The medium of transport. Possible values are\n'air', 'road', 'train', 'water'",
          },
          {
            name: 'from',
            type: 'string',
            desc: 'The departure town/city/state/country.',
          },
          {
            name: 'fromStateCode',
            type: 'string',
            desc: 'The code of the departure town/city/state/country.',
          },
          {
            name: 'fromTerminal',
            type: 'string',
            desc: 'The departure terminal/bus-stop/park/airport.',
          },
          {
            name: 'to',
            type: 'string',
            desc: 'The arrival town/city/state/country.',
          },
          {
            name: 'toStateCode',
            type: 'string',
            desc: 'The code of the arrival town/city/state/country.',
          },
          {
            name: 'toTerminal',
            type: 'string',
            desc: 'The arrival terminal/bus-stop/park/airport.',
          },
          {
            name: 'price',
            type: 'uint64',
            desc: 'The unit ticket price in algos',
          },
          {
            name: 'receiverAddress',
            type: 'address',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'updateReceiverAddress',
        desc: 'This updates the receiver address of the smart contract.',
        args: [
          {
            name: 'receiverAddress',
            type: 'address',
            desc: 'The new receiver address',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'updatePrice',
        desc: 'This updates the unit price of a ticket.',
        args: [
          {
            name: 'newPrice',
            type: 'uint64',
            desc: 'The new price in algos',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'mintTicket',
        desc: 'This mints a new ticket for the route.',
        args: [
          {
            name: 'paymentTxn',
            type: 'pay',
            desc: 'A transaction with payment information\nfor the ticket.',
          },
          {
            name: 'ipfsUrl',
            type: 'string',
            desc: 'IPFS url of the ticket',
          },
          {
            name: 'numberOfTickets',
            type: 'uint64',
            desc: 'The number of tickets in one.',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'claimTicket',
        desc: 'This sends the ticket to the address of the passenger.',
        args: [],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'useTicket',
        desc: 'This method freezes the ticket in the account of the passenger. A frozen\nticket is a used ticket.',
        args: [
          {
            name: 'assetID',
            type: 'uint64',
            desc: 'Asset ID of the ticket.',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'burnTicket',
        desc: 'This destroys the asset',
        args: [
          {
            name: 'optOutTxn',
            type: 'axfer',
            desc: 'Transaction opting out user from asset',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'optInToApplication',
        args: [],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'deleteApplication',
        args: [],
        returns: {
          type: 'void',
        },
      },
    ],
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC };
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC };
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult> &
  AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<
    SendTransactionParams,
    | 'skipSending'
    | 'atc'
    | 'skipWaiting'
    | 'maxRoundsToWaitForConfirmation'
    | 'populateAppCallResources'
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'
>;

/**
 * Defines the types of available calls and state of the FluxTrail smart contract.
 */
export type FluxTrail = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    | 'createApplication(string,string,string,string,string,string,string,uint64,address)void'
    | 'createApplication',
    {
      argsObj: {
        /**
         * The medium of transport. Possible values are
'air', 'road', 'train', 'water'
         */
        transportMedium: string;
        /**
         * The departure town/city/state/country.
         */
        from: string;
        /**
         * The code of the departure town/city/state/country.
         */
        fromStateCode: string;
        /**
         * The departure terminal/bus-stop/park/airport.
         */
        fromTerminal: string;
        /**
         * The arrival town/city/state/country.
         */
        to: string;
        /**
         * The code of the arrival town/city/state/country.
         */
        toStateCode: string;
        /**
         * The arrival terminal/bus-stop/park/airport.
         */
        toTerminal: string;
        /**
         * The unit ticket price in algos
         */
        price: bigint | number;
        receiverAddress: string;
      };
      argsTuple: [
        transportMedium: string,
        from: string,
        fromStateCode: string,
        fromTerminal: string,
        to: string,
        toStateCode: string,
        toTerminal: string,
        price: bigint | number,
        receiverAddress: string,
      ];
      returns: void;
    }
  > &
    Record<
      'updateReceiverAddress(address)void' | 'updateReceiverAddress',
      {
        argsObj: {
          /**
           * The new receiver address
           */
          receiverAddress: string;
        };
        argsTuple: [receiverAddress: string];
        returns: void;
      }
    > &
    Record<
      'updatePrice(uint64)void' | 'updatePrice',
      {
        argsObj: {
          /**
           * The new price in algos
           */
          newPrice: bigint | number;
        };
        argsTuple: [newPrice: bigint | number];
        returns: void;
      }
    > &
    Record<
      'mintTicket(pay,string,uint64)void' | 'mintTicket',
      {
        argsObj: {
          /**
         * A transaction with payment information
for the ticket.
         */
          paymentTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
          /**
           * IPFS url of the ticket
           */
          ipfsUrl: string;
          /**
           * The number of tickets in one.
           */
          numberOfTickets: bigint | number;
        };
        argsTuple: [
          paymentTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
          ipfsUrl: string,
          numberOfTickets: bigint | number,
        ];
        returns: void;
      }
    > &
    Record<
      'claimTicket()void' | 'claimTicket',
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      'useTicket(uint64)void' | 'useTicket',
      {
        argsObj: {
          /**
           * Asset ID of the ticket.
           */
          assetID: bigint | number;
        };
        argsTuple: [assetID: bigint | number];
        returns: void;
      }
    > &
    Record<
      'burnTicket(axfer)void' | 'burnTicket',
      {
        argsObj: {
          /**
           * Transaction opting out user from asset
           */
          optOutTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
        };
        argsTuple: [optOutTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>];
        returns: void;
      }
    > &
    Record<
      'optInToApplication()void' | 'optInToApplication',
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      'deleteApplication()void' | 'deleteApplication',
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      transportMedium?: BinaryState;
      from?: BinaryState;
      fromStateCode?: BinaryState;
      fromTerminal?: BinaryState;
      to?: BinaryState;
      toStateCode?: BinaryState;
      toTerminal?: BinaryState;
      price?: IntegerState;
      numberOfTicketsSold?: IntegerState;
      receiverAddress?: BinaryState;
    };
    local: {
      ticket?: IntegerState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type FluxTrailSig = keyof FluxTrail['methods'];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends FluxTrailSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the FluxTrail smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends FluxTrailSig> = FluxTrail['methods'][TSignature][
  | 'argsObj'
  | 'argsTuple'];
/**
 * Maps a method signature from the FluxTrail smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FluxTrailSig> =
  FluxTrail['methods'][TSignature]['returns'];

/**
 * A factory for available 'create' calls
 */
export type FluxTrailCreateCalls = (typeof FluxTrailCallFactory)['create'];
/**
 * Defines supported create methods for this smart contract
 */
export type FluxTrailCreateCallParams =
  | TypedCallParams<'createApplication(string,string,string,string,string,string,string,uint64,address)void'> &
      OnCompleteNoOp;
/**
 * A factory for available 'delete' calls
 */
export type FluxTrailDeleteCalls = (typeof FluxTrailCallFactory)['delete'];
/**
 * Defines supported delete methods for this smart contract
 */
export type FluxTrailDeleteCallParams = TypedCallParams<'deleteApplication()void'>;
/**
 * Defines arguments required for the deploy method.
 */
export type FluxTrailDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: FluxTrailCreateCalls) => FluxTrailCreateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: FluxTrailDeleteCalls) => FluxTrailDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class FluxTrailCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the FluxTrail smart contract using the createApplication(string,string,string,string,string,string,string,uint64,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<'createApplication(string,string,string,string,string,string,string,uint64,address)void'>,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ) {
        return {
          method:
            'createApplication(string,string,string,string,string,string,string,uint64,address)void' as const,
          methodArgs: Array.isArray(args)
            ? args
            : [
                args.transportMedium,
                args.from,
                args.fromStateCode,
                args.fromTerminal,
                args.to,
                args.toStateCode,
                args.toTerminal,
                args.price,
                args.receiverAddress,
              ],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the FluxTrail smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(
        args: MethodArgs<'deleteApplication()void'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {},
      ) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the FluxTrail smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(
        args: MethodArgs<'optInToApplication()void'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {},
      ) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the updateReceiverAddress(address)void ABI method
   *
   * This updates the receiver address of the smart contract.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateReceiverAddress(
    args: MethodArgs<'updateReceiverAddress(address)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'updateReceiverAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.receiverAddress],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the updatePrice(uint64)void ABI method
   *
   * This updates the unit price of a ticket.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updatePrice(
    args: MethodArgs<'updatePrice(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'updatePrice(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newPrice],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the mintTicket(pay,string,uint64)void ABI method
   *
   * This mints a new ticket for the route.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintTicket(
    args: MethodArgs<'mintTicket(pay,string,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'mintTicket(pay,string,uint64)void' as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.paymentTxn, args.ipfsUrl, args.numberOfTickets],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the claimTicket()void ABI method
   *
   * This sends the ticket to the address of the passenger.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimTicket(
    args: MethodArgs<'claimTicket()void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'claimTicket()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the useTicket(uint64)void ABI method
   *
   * This method freezes the ticket in the account of the passenger. A frozen
ticket is a used ticket.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static useTicket(
    args: MethodArgs<'useTicket(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'useTicket(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetID],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the burnTicket(axfer)void ABI method
   *
   * This destroys the asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnTicket(
    args: MethodArgs<'burnTicket(axfer)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'burnTicket(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.optOutTxn],
      ...params,
    };
  }
}

/**
 * A client to make calls to the FluxTrail smart contract
 */
export class FluxTrailClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `FluxTrailClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<
    TReturn,
    TResult extends AppCallTransactionResult = AppCallTransactionResult,
  >(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof FluxTrail['methods']>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter,
    );
  }

  /**
   * Idempotently deploys the FluxTrail smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: FluxTrailDeployArgs & AppClientDeployCoreParams = {},
  ): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(FluxTrailCallFactory.create);
    const deleteArgs = params.deleteCall?.(FluxTrailCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the FluxTrail smart contract using the createApplication(string,string,string,string,string,string,string,uint64,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<'createApplication(string,string,string,string,string,string,string,uint64,address)void'>,
        params: AppClientCallCoreParams & AppClientCompilationParams & OnCompleteNoOp = {},
      ) {
        return $this.mapReturnValue<
          MethodReturn<'createApplication(string,string,string,string,string,string,string,uint64,address)void'>,
          AppCreateCallTransactionResult
        >(
          await $this.appClient.create(FluxTrailCallFactory.create.createApplication(args, params)),
        );
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the FluxTrail smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(
        args: MethodArgs<'deleteApplication()void'>,
        params: AppClientCallCoreParams = {},
      ) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(
          await $this.appClient.delete(FluxTrailCallFactory.delete.deleteApplication(args, params)),
        );
      },
    };
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this;
    return {
      /**
       * Opts the user into an existing instance of the FluxTrail smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(
        args: MethodArgs<'optInToApplication()void'>,
        params: AppClientCallCoreParams = {},
      ) {
        return $this.mapReturnValue<MethodReturn<'optInToApplication()void'>>(
          await $this.appClient.optIn(FluxTrailCallFactory.optIn.optInToApplication(args, params)),
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the FluxTrail smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the updateReceiverAddress(address)void ABI method.
   *
   * This updates the receiver address of the smart contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateReceiverAddress(
    args: MethodArgs<'updateReceiverAddress(address)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(FluxTrailCallFactory.updateReceiverAddress(args, params));
  }

  /**
   * Calls the updatePrice(uint64)void ABI method.
   *
   * This updates the unit price of a ticket.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updatePrice(
    args: MethodArgs<'updatePrice(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(FluxTrailCallFactory.updatePrice(args, params));
  }

  /**
   * Calls the mintTicket(pay,string,uint64)void ABI method.
   *
   * This mints a new ticket for the route.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintTicket(
    args: MethodArgs<'mintTicket(pay,string,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(FluxTrailCallFactory.mintTicket(args, params));
  }

  /**
   * Calls the claimTicket()void ABI method.
   *
   * This sends the ticket to the address of the passenger.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimTicket(
    args: MethodArgs<'claimTicket()void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(FluxTrailCallFactory.claimTicket(args, params));
  }

  /**
   * Calls the useTicket(uint64)void ABI method.
   *
   * This method freezes the ticket in the account of the passenger. A frozen
ticket is a used ticket.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public useTicket(
    args: MethodArgs<'useTicket(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(FluxTrailCallFactory.useTicket(args, params));
  }

  /**
   * Calls the burnTicket(axfer)void ABI method.
   *
   * This destroys the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnTicket(
    args: MethodArgs<'burnTicket(axfer)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(FluxTrailCallFactory.burnTicket(args, params));
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!('valueRaw' in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`,
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ('valueRaw' in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`,
      );
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<FluxTrail['state']['global']> {
    const state = await this.appClient.getGlobalState();
    return {
      get transportMedium() {
        return FluxTrailClient.getBinaryState(state, 'transportMedium');
      },
      get from() {
        return FluxTrailClient.getBinaryState(state, 'from');
      },
      get fromStateCode() {
        return FluxTrailClient.getBinaryState(state, 'fromStateCode');
      },
      get fromTerminal() {
        return FluxTrailClient.getBinaryState(state, 'fromTerminal');
      },
      get to() {
        return FluxTrailClient.getBinaryState(state, 'to');
      },
      get toStateCode() {
        return FluxTrailClient.getBinaryState(state, 'toStateCode');
      },
      get toTerminal() {
        return FluxTrailClient.getBinaryState(state, 'toTerminal');
      },
      get price() {
        return FluxTrailClient.getIntegerState(state, 'price');
      },
      get numberOfTicketsSold() {
        return FluxTrailClient.getIntegerState(state, 'numberOfTicketsSold');
      },
      get receiverAddress() {
        return FluxTrailClient.getBinaryState(state, 'receiverAddress');
      },
    };
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(
    account: string | SendTransactionFrom,
  ): Promise<FluxTrail['state']['local']> {
    const state = await this.appClient.getLocalState(account);
    return {
      get ticket() {
        return FluxTrailClient.getIntegerState(state, 'ticket');
      },
    };
  }

  public compose(): FluxTrailComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      updateReceiverAddress(
        args: MethodArgs<'updateReceiverAddress(address)void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.updateReceiverAddress(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      updatePrice(
        args: MethodArgs<'updatePrice(uint64)void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.updatePrice(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      mintTicket(
        args: MethodArgs<'mintTicket(pay,string,uint64)void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.mintTicket(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      claimTicket(
        args: MethodArgs<'claimTicket()void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.claimTicket(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      useTicket(
        args: MethodArgs<'useTicket(uint64)void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.useTicket(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      burnTicket(
        args: MethodArgs<'burnTicket(axfer)void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.burnTicket(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      get delete() {
        const $this = this;
        return {
          deleteApplication(
            args: MethodArgs<'deleteApplication()void'>,
            params?: AppClientComposeCallCoreParams,
          ) {
            promiseChain = promiseChain.then(() =>
              client.delete.deleteApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              }),
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get optIn() {
        const $this = this;
        return {
          optInToApplication(
            args: MethodArgs<'optInToApplication()void'>,
            params?: AppClientComposeCallCoreParams,
          ) {
            promiseChain = promiseChain.then(() =>
              client.optIn.optInToApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              }),
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender),
          ),
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(
          client.algod,
          new modelsv2.SimulateRequest({ txnGroups: [], ...options }),
        );
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue,
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams },
          client.algod,
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue,
          ),
        };
      },
    } as unknown as FluxTrailComposer;
  }
}
export type FluxTrailComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the updateReceiverAddress(address)void ABI method.
   *
   * This updates the receiver address of the smart contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateReceiverAddress(
    args: MethodArgs<'updateReceiverAddress(address)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): FluxTrailComposer<[...TReturns, MethodReturn<'updateReceiverAddress(address)void'>]>;

  /**
   * Calls the updatePrice(uint64)void ABI method.
   *
   * This updates the unit price of a ticket.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePrice(
    args: MethodArgs<'updatePrice(uint64)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): FluxTrailComposer<[...TReturns, MethodReturn<'updatePrice(uint64)void'>]>;

  /**
   * Calls the mintTicket(pay,string,uint64)void ABI method.
   *
   * This mints a new ticket for the route.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintTicket(
    args: MethodArgs<'mintTicket(pay,string,uint64)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): FluxTrailComposer<[...TReturns, MethodReturn<'mintTicket(pay,string,uint64)void'>]>;

  /**
   * Calls the claimTicket()void ABI method.
   *
   * This sends the ticket to the address of the passenger.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimTicket(
    args: MethodArgs<'claimTicket()void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): FluxTrailComposer<[...TReturns, MethodReturn<'claimTicket()void'>]>;

  /**
   * Calls the useTicket(uint64)void ABI method.
   *
   * This method freezes the ticket in the account of the passenger. A frozen
ticket is a used ticket.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  useTicket(
    args: MethodArgs<'useTicket(uint64)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): FluxTrailComposer<[...TReturns, MethodReturn<'useTicket(uint64)void'>]>;

  /**
   * Calls the burnTicket(axfer)void ABI method.
   *
   * This destroys the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnTicket(
    args: MethodArgs<'burnTicket(axfer)void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): FluxTrailComposer<[...TReturns, MethodReturn<'burnTicket(axfer)void'>]>;

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the FluxTrail smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(
      args: MethodArgs<'deleteApplication()void'>,
      params?: AppClientComposeCallCoreParams,
    ): FluxTrailComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>;
  };

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the FluxTrail smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(
      args: MethodArgs<'optInToApplication()void'>,
      params?: AppClientComposeCallCoreParams,
    ): FluxTrailComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the FluxTrail smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): FluxTrailComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): FluxTrailComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<FluxTrailComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<FluxTrailComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<
  ConstructorParameters<typeof modelsv2.SimulateRequest>[0],
  'txnGroups'
>;
export type FluxTrailComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type FluxTrailComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
